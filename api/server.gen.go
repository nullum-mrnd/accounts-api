// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// Account defines model for Account.
type Account struct {
	Id       *int    `json:"id,omitempty"`
	Phone    *string `json:"phone,omitempty"`
	Username *string `json:"username,omitempty"`
}

// NewAccount defines model for NewAccount.
type NewAccount struct {
	Phone    *string `json:"phone,omitempty"`
	Username *string `json:"username,omitempty"`
}

// UpdateAccountJSONRequestBody defines body for UpdateAccount for application/json ContentType.
type UpdateAccountJSONRequestBody = NewAccount

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all accounts
	// (GET /accounts)
	GetAccounts(c *gin.Context)
	// New account creation
	// (POST /accounts)
	CreateAccount(c *gin.Context)
	// Delete an Account
	// (DELETE /accounts/{id})
	DeleteAccount(c *gin.Context, id string)
	// Returns a specific account
	// (GET /accounts/{id})
	GetAccountById(c *gin.Context, id string)
	// Update an account
	// (PUT /accounts/{id})
	UpdateAccount(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAccounts operation middleware
func (siw *ServerInterfaceWrapper) GetAccounts(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAccounts(c)
}

// CreateAccount operation middleware
func (siw *ServerInterfaceWrapper) CreateAccount(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateAccount(c)
}

// DeleteAccount operation middleware
func (siw *ServerInterfaceWrapper) DeleteAccount(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteAccount(c, id)
}

// GetAccountById operation middleware
func (siw *ServerInterfaceWrapper) GetAccountById(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAccountById(c, id)
}

// UpdateAccount operation middleware
func (siw *ServerInterfaceWrapper) UpdateAccount(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateAccount(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/accounts", wrapper.GetAccounts)
	router.POST(options.BaseURL+"/accounts", wrapper.CreateAccount)
	router.DELETE(options.BaseURL+"/accounts/:id", wrapper.DeleteAccount)
	router.GET(options.BaseURL+"/accounts/:id", wrapper.GetAccountById)
	router.PUT(options.BaseURL+"/accounts/:id", wrapper.UpdateAccount)
}

type GetAccountsRequestObject struct {
}

type GetAccountsResponseObject interface {
	VisitGetAccountsResponse(w http.ResponseWriter) error
}

type GetAccounts200JSONResponse []Account

func (response GetAccounts200JSONResponse) VisitGetAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateAccountRequestObject struct {
}

type CreateAccountResponseObject interface {
	VisitCreateAccountResponse(w http.ResponseWriter) error
}

type CreateAccount201JSONResponse NewAccount

func (response CreateAccount201JSONResponse) VisitCreateAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAccountRequestObject struct {
	Id string `json:"id"`
}

type DeleteAccountResponseObject interface {
	VisitDeleteAccountResponse(w http.ResponseWriter) error
}

type DeleteAccount204Response struct {
}

func (response DeleteAccount204Response) VisitDeleteAccountResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type GetAccountByIdRequestObject struct {
	Id string `json:"id"`
}

type GetAccountByIdResponseObject interface {
	VisitGetAccountByIdResponse(w http.ResponseWriter) error
}

type GetAccountById200JSONResponse Account

func (response GetAccountById200JSONResponse) VisitGetAccountByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAccountRequestObject struct {
	Id   string `json:"id"`
	Body *UpdateAccountJSONRequestBody
}

type UpdateAccountResponseObject interface {
	VisitUpdateAccountResponse(w http.ResponseWriter) error
}

type UpdateAccount200JSONResponse Account

func (response UpdateAccount200JSONResponse) VisitUpdateAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Returns all accounts
	// (GET /accounts)
	GetAccounts(ctx context.Context, request GetAccountsRequestObject) (GetAccountsResponseObject, error)
	// New account creation
	// (POST /accounts)
	CreateAccount(ctx context.Context, request CreateAccountRequestObject) (CreateAccountResponseObject, error)
	// Delete an Account
	// (DELETE /accounts/{id})
	DeleteAccount(ctx context.Context, request DeleteAccountRequestObject) (DeleteAccountResponseObject, error)
	// Returns a specific account
	// (GET /accounts/{id})
	GetAccountById(ctx context.Context, request GetAccountByIdRequestObject) (GetAccountByIdResponseObject, error)
	// Update an account
	// (PUT /accounts/{id})
	UpdateAccount(ctx context.Context, request UpdateAccountRequestObject) (UpdateAccountResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAccounts operation middleware
func (sh *strictHandler) GetAccounts(ctx *gin.Context) {
	var request GetAccountsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccounts(ctx, request.(GetAccountsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccounts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAccountsResponseObject); ok {
		if err := validResponse.VisitGetAccountsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateAccount operation middleware
func (sh *strictHandler) CreateAccount(ctx *gin.Context) {
	var request CreateAccountRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAccount(ctx, request.(CreateAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateAccountResponseObject); ok {
		if err := validResponse.VisitCreateAccountResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAccount operation middleware
func (sh *strictHandler) DeleteAccount(ctx *gin.Context, id string) {
	var request DeleteAccountRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAccount(ctx, request.(DeleteAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteAccountResponseObject); ok {
		if err := validResponse.VisitDeleteAccountResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAccountById operation middleware
func (sh *strictHandler) GetAccountById(ctx *gin.Context, id string) {
	var request GetAccountByIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccountById(ctx, request.(GetAccountByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccountById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAccountByIdResponseObject); ok {
		if err := validResponse.VisitGetAccountByIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateAccount operation middleware
func (sh *strictHandler) UpdateAccount(ctx *gin.Context, id string) {
	var request UpdateAccountRequestObject

	request.Id = id

	var body UpdateAccountJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateAccount(ctx, request.(UpdateAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateAccountResponseObject); ok {
		if err := validResponse.VisitUpdateAccountResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8ST0W/TMBDG/5Xo4DFqMsbD5LcOJDQhDQTiCe3BONfWU2J75/OmqMr/jmzPa2i7TUgb",
	"vLSp79z7fvd92YKyg7MGDXsQW/Bqg4NMj0ulbDAcHx1Zh8QaU0F38ZNHhyBAG8Y1Ekw1uI01OCt5Jm3W",
	"sRI8kpHDseJUlxP76xoVx/ZLvHt0+AsNiUfarGxq1tzH2rKXNFT3k6vl1wuo4RbJa2tAwMmiXbRxjnVo",
	"pNMg4HTRLk6hBid5k8Q1Ml9OP9aY5EfxkrU1Fx0I+IS8LD01EHpnjc9k79o2filrGDO5dK7XKl1urn1U",
	"UQxKNjAO6eJbwhUIeNPsrGzufWzKHncbkERyzAvo0CvSjjPgl89pUT4Mg6QRBHxDDmR8Jfu+egCLPlt/",
	"hOwDoWQs8w7YTv6K7SmkWTqOUBT7VJLT7SFd4l1ByR3xUmx5cK7Z6m6KEjrskfGQ82M633E6SXJARvIg",
	"fm5BRxExEFBDTmN8X+I6boIm7EAwBaxnrPtZvTrY3fusZ475PSiF3q9CX5XmPdSss5KmmmXgmUyejxfd",
	"v0FqXywOT2Th8URX3qHSK61KGlKuw5Hl/HCdfH27bwJ6Prfd+GpvyZ+Cpv9jyPOpzeuOqZXzv/FIt2Xl",
	"gXoQsGF2oml6q2S/sZ7FWXvWwnQ1/Q4AAP//LJhw49IGAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
